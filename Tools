import tkinter as tk
from tkinter import ttk, messagebox
import json
import os

class StringTrainer:
    def __init__(self):
        # Speicherort im Benutzerverzeichnis festlegen
        self.user_home = os.path.expanduser("~")
        self.config_dir = os.path.join(self.user_home, ".bibeltrainer")
        self.config_file = os.path.join(self.config_dir, "saved_texts.json")
        
        # Verzeichnis erstellen, falls nicht vorhanden
        if not os.path.exists(self.config_dir):
            os.makedirs(self.config_dir)
            
        self.saved_texts = self.load_saved_texts()
        
        self.root = tk.Tk()
        self.root.title("Bibel-Trainer")
        
        # Anzeige des Speicherorts
        self.path_label = tk.Label(self.root, text=f"Speicherort: {self.config_file}")
        self.path_label.pack(pady=5)
        
        # Auswahlfeld für gespeicherte Texte
        self.text_frame = tk.Frame(self.root)
        self.text_frame.pack(pady=10)
        
        self.text_var = tk.StringVar()
        self.text_dropdown = ttk.Combobox(self.text_frame, 
                                        textvariable=self.text_var,
                                        width=40)
        self.update_dropdown()
        self.text_dropdown.pack(side=tk.LEFT, padx=5)
        
        # Neuer Text Eingabe
        self.setup_frame = tk.Frame(self.root)
        self.setup_frame.pack(pady=10)
        
        tk.Label(self.setup_frame, text="Neuer Text:").pack(side=tk.LEFT)
        self.text_eingabe = tk.Entry(self.setup_frame, width=40)
        self.text_eingabe.pack(side=tk.LEFT, padx=5)
        
        tk.Button(self.setup_frame, text="Start", 
                 command=self.starte_lernen).pack(side=tk.LEFT)
        
        self.anzeige_label = tk.Label(self.root, text="", font=('Arial', 16))
        self.anzeige_label.pack(pady=20)
        
        # Status-Label für Feedback
        self.status_label = tk.Label(self.root, text="", fg="green")
        self.status_label.pack(pady=5)
        
        self.position = 0
        self.lern_text = ""
        self.root.bind('<Key>', self.prüfe_eingabe)

    def load_saved_texts(self):
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return []
        return []

    def save_texts(self):
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(self.saved_texts, f, ensure_ascii=False, indent=2)

    def update_dropdown(self):
        self.text_dropdown['values'] = self.saved_texts
        
    def starte_lernen(self):
        text = self.text_eingabe.get() or self.text_var.get()
        if not text:
            messagebox.showinfo("Hinweis", "Bitte Text eingeben oder auswählen!")
            return
            
        if text not in self.saved_texts:
            self.saved_texts.append(text)
            self.save_texts()
            self.update_dropdown()
            self.status_label.config(text="Neuer Text gespeichert!")
        
        self.lern_text = text
        self.position = 0
        self.anzeige_label.config(text="")
        self.setup_frame.pack_forget()
        self.text_frame.pack_forget()
        self.root.focus_set()
        
    def prüfe_eingabe(self, event):
        if not self.lern_text or not event.char or event.char in '\r\n\t':
            return
            
        if event.char == self.lern_text[self.position]:
            self.anzeige_label.config(text=self.lern_text[:self.position+1])
            self.position += 1
            if self.position == len(self.lern_text):
                messagebox.showinfo("Erfolg!", "Gratulation! Text gelernt!")
                self.position = 0
                self.anzeige_label.config(text="")
                self.setup_frame.pack(pady=10)
                self.text_frame.pack(pady=10)
        else:
            messagebox.showinfo("Falsch", 
                              f"Richtiges Zeichen: {self.lern_text[self.position]}")
            self.position = 0
            self.anzeige_label.config(text="")

    def starte(self):
        self.root.mainloop()

if __name__ == "__main__":
    trainer = StringTrainer()
    trainer.starte()
